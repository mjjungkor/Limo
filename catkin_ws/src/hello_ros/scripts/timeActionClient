import rospy, time
import threading
import actionlib
from hello_ros.msg import TimeWaitAction, TimeWaitGoal, TimeWaitFeedback, TimeWaitResult

class ActionClient:
    def __init__(self):
        self.client = actionlib.SimpleActionClient('time_action', TimeWaitAction)
        rospy.loginfo(f'begin action client process!')
        self.client.wait_for_server()

        goal=TimeWaitGoal()
        goal.time_to_wait=5.0
        self.client.send_goal(goal)

        finished=self.client.wait_for_result(rospy.Duration(10.0)) # 동기처리

        if finished:
            state=self.client.get_state()
            result=self.client.get_result()
            rospy.loginfo(f'Action Finished : {state}')
            rospy.loginfo(f'Result : 경과시간 {result.time_elapsed}, 피드백 횟수 {result.updates_sent}')
        else:
            rospy.loginfo(f'Action Server Fault')

def main():
    rospy.init_node('action_client')
    node=ActionClient()
    try:
        rospy.spin()
    except rospy.ROSInterruptException:
        pass

if __name__=='__main__':
    main()